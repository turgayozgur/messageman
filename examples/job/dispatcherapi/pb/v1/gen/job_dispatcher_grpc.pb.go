// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package messageman

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobDispatcherServiceClient is the client API for JobDispatcherService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobDispatcherServiceClient interface {
	Queue(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type jobDispatcherServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewJobDispatcherServiceClient(cc grpc.ClientConnInterface) JobDispatcherServiceClient {
	return &jobDispatcherServiceClient{cc}
}

func (c *jobDispatcherServiceClient) Queue(ctx context.Context, in *QueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/messageman.v1.JobDispatcherService/Queue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobDispatcherServiceServer is the server API for JobDispatcherService service.
// All implementations must embed UnimplementedJobDispatcherServiceServer
// for forward compatibility
type JobDispatcherServiceServer interface {
	Queue(context.Context, *QueueRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedJobDispatcherServiceServer()
}

// UnimplementedJobDispatcherServiceServer must be embedded to have forward compatible implementations.
type UnimplementedJobDispatcherServiceServer struct {
}

func (UnimplementedJobDispatcherServiceServer) Queue(context.Context, *QueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Queue not implemented")
}
func (UnimplementedJobDispatcherServiceServer) mustEmbedUnimplementedJobDispatcherServiceServer() {}

// UnsafeJobDispatcherServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobDispatcherServiceServer will
// result in compilation errors.
type UnsafeJobDispatcherServiceServer interface {
	mustEmbedUnimplementedJobDispatcherServiceServer()
}

func RegisterJobDispatcherServiceServer(s grpc.ServiceRegistrar, srv JobDispatcherServiceServer) {
	s.RegisterService(&JobDispatcherService_ServiceDesc, srv)
}

func _JobDispatcherService_Queue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobDispatcherServiceServer).Queue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/messageman.v1.JobDispatcherService/Queue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobDispatcherServiceServer).Queue(ctx, req.(*QueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobDispatcherService_ServiceDesc is the grpc.ServiceDesc for JobDispatcherService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobDispatcherService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "messageman.v1.JobDispatcherService",
	HandlerType: (*JobDispatcherServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Queue",
			Handler:    _JobDispatcherService_Queue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/v1/job_dispatcher.proto",
}
